@use 'sass:meta';
@use 'sass:string';
@use 'sass:math';
@use 'sass:list';
@use 'sass:map';

@use '../functions' as func;
@use '../variables' as vars;

@mixin mq-max-width($width: 767px) {
    $width_value: func.fs($width);
    @media screen and (max-width: #{$width_value}) {
        @content;
    }
}

@mixin mq-min-width($width: 768px) {
    $width_value: func.fs($width);
    @media screen and (min-width: #{$width_value}) {
        @content;
    }
}

@mixin mq($breakpoint, $type: min) {
    $breakpoint-value: func.fs(func.get-breakpoint($breakpoint, vars.$mq-breakpoints, 640px));
    @if $breakpoint-value {
        @if $type == max {
            $breakpoint-value: #{$breakpoint-value - func.fs(0.02)};
        }
        @media only screen and (#{$type}-width: $breakpoint-value) {
            @content;
        }
    } @else {
        @warn 'Invalid breakpoint: `#{$breakpoint}`. Using fallback.';
    }
}

@mixin mq-min($breakpoint: md) {
    @include mq($breakpoint, min) {
        @content;
    }
}

@mixin mq-max($breakpoint: md) {
    @include mq($breakpoint, max) {
        @content;
    }
}

@mixin line-clamp($n: 2) {
    & {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: initial;
        overflow-wrap: break-word;

        @supports (-webkit-line-clamp: $n) {
            -webkit-line-clamp: $n;
            -webkit-box-orient: vertical;
            display: -webkit-box;
        }
    }
}

@mixin hidden-text {
    border: 0;
    clip: rect(0, 0, 0, 0);
    clip-path: inset(50%);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute !important;
    width: 1px;
    overflow-wrap: normal !important;
    white-space: nowrap;
}

@mixin clamp-font-size($min: 15px, $max: 30px, $base: vars.$base-line-height-global, $min-width: vars.$sm, $max-width: vars.$xxl) {
    $min-rem: func.fs($min);
    $max-rem: func.fs($max);
    $min-width-rem: func.fs($min-width);
    $max-width-rem: func.fs($max-width);

    $min-val: func.strip-unit($min-rem);
    $max-val: func.strip-unit($max-rem);
    $min-width-val: func.strip-unit($min-width-rem);
    $max-width-val: func.strip-unit($max-width-rem);

    @if $min-val > $max-val {
        $tmp: $min;
        $min: $max;
        $max: $tmp;

        $min-rem: func.fs($min);
        $max-rem: func.fs($max);
        $min-val: func.strip-unit($min-rem);
        $max-val: func.strip-unit($max-rem);
    }

    // min = max
    @if $min-val == $max-val {
        & {
            font-size: $min-rem;

            @if meta.type-of($base) == 'number' {
                line-height: $min-rem * $base;
            }
        }
    }

    // min < max
    @if $min-val < $max-val {
        $slope: func.divide(
                                ($max-val - $min-val),
                                ($max-width-val - $min-width-val)
        );
        $intercept: $min-val - $slope * $min-width-val;
        $font-clamp: clamp(
                #{$min-rem},
                #{$intercept}rem + #{$slope * 100}vw,
                #{$max-rem}
        );

        & {
            font-size: $font-clamp;

            @if meta.type-of($base) == 'number' {
                $lh-intercept: $min-val * $base - $slope * $base * $min-width-val;
                $line-height-clamp: clamp(
                        #{$min-rem * $base},
                        #{$lh-intercept}rem + #{$slope * $base * 100}vw,
                        #{$max-rem * $base}
                );
                line-height: $line-height-clamp;
            }
        }
    }
}

@mixin clamp-fs( $heading: h1, $base: vars.$base-line-height-header ) {
    $fs-heading: map.get(vars.$font-sizes, $heading);
    $min: func.fs(list.nth($fs-heading, 1));
    $max: func.fs(list.nth($fs-heading, 2));

    @include clamp-font-size($min, $max, $base, vars.$sm, vars.$xxl);
}

@mixin hamburger($color: #000, $color-hover: #000, $width: 20px, $height: 16px, $weight: 2px, $bars: 3) {
    $shadow: ();
    $hover-shadow: ();
    $spacing: func.divide($height - ($weight * $bars), $bars - 1);

    @if math.unit($spacing) == 'px' {
        $spacing: math.floor($spacing);
    }

    @for $i from 2 through $bars {
        $offset: ($weight + $spacing) * ($i - 1);
        $shadow: list.append($shadow, 0 $offset 0 $color, comma);
    }

    & {
        position: relative;
        display: inline-block;
        vertical-align: middle;
        cursor: pointer;
        width: $width;
        height: $height;

        &::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            display: block;
            background: $color;
            box-shadow: $shadow;
            width: 100%;
            height: $weight;
        }

        @if $color-hover {
            @for $i from 2 through $bars {
                $offset: ($weight + $spacing) * ($i - 1);
                $hover-shadow: list.append($hover-shadow, 0 $offset 0 $color-hover, comma);
            }

            &:hover::after {
                background: $color-hover;
                box-shadow: $hover-shadow;
            }
        }
    }
}

@mixin font-face($font-family, $font-style: normal, $font-weight: 400, $file_name, $base: '../fonts') {
    $base: string.unquote($base);
    $version: string.unique_id();

    @font-face {
        font-family: string.quote($font-family);
        font-style: $font-style;
        font-weight: $font-weight;
        font-display: swap;
        src: url('#{$base}/WOFF2/#{$file_name}.woff2?v=#{$version}') format('woff2'),
        url('#{$base}/TTF/#{$file_name}.ttf?v=#{$version}') format('truetype'),
        url('#{$base}/OTF/#{$file_name}.otf?v=#{$version}') format('opentype');
    }
}

@mixin responsive-height($multiplier: 100, $css_property: height, $admin_bar: false) {
    @if $admin_bar {
        #{$css_property}: calc(var(--vh, 1vh) * #{$multiplier} - 32px);
    } @else {
        #{$css_property}: calc(var(--vh, 1vh) * #{$multiplier});
    }

    @supports (height: 100dvh) {
        @if $admin_bar {
            #{$css_property}: calc(#{$multiplier}dvh - 32px);
        } @else {
            #{$css_property}: #{$multiplier}dvh;
        }
    }

    @include mq-max-width(782px) {
        @if $admin_bar {
            #{$css_property}: calc(var(--vh, 1vh) * #{$multiplier} - 46px);

            @supports (height: 100dvh) {
                #{$css_property}: calc(#{$multiplier}dvh - 46px);
            }
        }
    }
}

@mixin centering-self($width: 300, $height: $width) {
    & {
        position: absolute;
        top: func.subtract(50%, func.fs(func.divide($height, 2)));
        left: func.subtract(50%, func.fs(func.divide($width, 2)));
        width: $width;
        height: $height;
    }
}

@mixin animation-loading($size: 30px, $color1: #000, $color2: #fff, $border_width: 2px, $bg: rgb(0 0 0 / 5%)) {
    & {
        position: relative;

        &::before {
            z-index: 99998;
            content: '';
            background-color: $bg;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        &::after {
            content: '';
            z-index: 99999;
            border: $border_width solid;
            border-color: $color1 $color2 $color1 $color2; // top right bottom left
            border-radius: 50%;
            animation: spin 2.5s linear infinite;
            position: absolute;
            top: calc(50% - ($size + $border_width * 2) / 2);
            left: calc(50% - ($size + $border_width * 2) / 2);
            width: $size;
            height: $size;
        }
    }
}

@mixin absolute-full {
    & {
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        position: absolute;
    }
}

@mixin fixed-full {
    & {
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        position: fixed;
    }
}

@mixin absolute-center {
    & {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
}

@mixin responsive-wrapper($width: 100%) {
    position: relative;
    display: block;
    overflow: hidden;
    transition: all 0.3s ease-in-out;

    @if $width != false {
        width: func.fs($width);
    }

    & > img:first-child {
        display: block;
        @include absolute-center;
    }

    &:not(.auto) {
        & > img:first-child {
            height: 100% !important;
            width: 100%;
            max-width: unset;
            object-fit: cover;
            object-position: center;
        }
    }
}

@mixin responsive-scale($scale: 1.06, $opacity: 1) {
    transform: scale(1.0001);
    will-change: transform;
    transition: transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.3s;

    &:hover {
        transform: scale($scale);
        opacity: $opacity;
    }
}


@mixin responsive-ratio($ratio-width: 3, $ratio-height: 2, $width_percent: 100%) {
    $padding: func.divide($width_percent * $ratio-height, $ratio-width);

    & {
        @supports (aspect-ratio: 1) {
            aspect-ratio: list.slash($ratio-width, $ratio-height);
        }

        @supports not (aspect-ratio: 1) {
            height: 0;
            padding-bottom: func.fs($padding);
        }
    }
}

@mixin container($padding_m: vars.$gutter-xs, $padding: vars.$gutter, $xxl: false) {
    margin-inline: auto;
    max-width: map.get(vars.$container-breakpoints, sm);

    &:not(.full) {
        padding-inline: func.fs($padding_m);

        // sm breakpoint
        @include mq-min(sm) {
            max-width: map.get(vars.$container-breakpoints, md);
        }

        // md breakpoint
        @include mq-min(md) {
            padding-inline: func.fs($padding);
            max-width: map.get(vars.$container-breakpoints, md);
        }

        // lg breakpoint
        @include mq-min(lg) {
            max-width: map.get(vars.$container-breakpoints, lg);
        }

        // xl breakpoint
        @include mq-min(xl) {
            max-width: map.get(vars.$container-breakpoints, xl);
        }

        // xxl breakpoint
        @if $xxl == true {
            @include mq-min(xxl) {
                max-width: map.get(vars.$container-breakpoints, xxl);
            }
        }
    }
}

@function calculate-flex-width($columns: 12, $span: 1, $gap: 0) {
    @if meta.type-of($columns) == "number" and meta.type-of($span) == "number" and $columns > 0 and $span > 0 {
        @if $columns == $span {
            @return math.percentage(1);
        } @else if $columns > $span {
            @if meta.type-of($gap) == bool or $gap < 0 {
                $gap: 0;
            }

            $width: math.percentage(func.divide($span, $columns));
            $gap_adjust: func.fs(($columns - $span) * func.divide($gap, $columns));

            @return func.subtract($width, $gap_adjust);
        }
    }

    @return 0;
}

@mixin flex-self($total: 12, $n: 1, $gap: 0, $important: false) {
    $width: calculate-flex-width($total, $n, $gap);
    @if $width != 0 {
        & {
            width: #{$width}#{if($important, ' !important', '')};
        }
    }
}

@mixin flex-basis($n: 1, $gap: 0, $important: false) {
    $grid-columns: 12;
    @include flex-self($grid-columns, $n, $gap, $important);
}

@mixin media-flex-basis($m: 1, $t: false, $d: false) {
    @if $m != false {
        @include flex-basis($m, vars.$gap-xs);
    }
    @if $t != false {
        @include mq-min(md) {
            @include flex-basis($t, vars.$gap);
        }
    }
    @if $d != false {
        @include mq-min(lg) {
            @include flex-basis($d, vars.$gap);
        }
    }
}

@mixin cell($grow: 0, $shrink: 0, $basis: auto, $w: false) {
    & {
        flex: $grow $shrink $basis;
        min-width: 0;

        @if meta.type-of($w) != bool {
            width: func.fs($w);
        }
    }
}

@mixin flex-shrink {
    @include cell(0, 0, auto);
}

@mixin flex-auto {
    @include cell(1, 1, 0, auto);
}

@mixin flex-stretch {
    @include cell(0, 0, auto, 100%);
}

@mixin flex-center() {
    & {
        display: flex;
        align-items: center;
        justify-content: center;
    }
}

@mixin media-css($css_property: font-size, $m, $t: false, $d: false) {
    & {
        @if $m != false {
            #{$css_property}: func.fs($m);
        }
        @if $t != false {
            @include mq-min(md) {
                #{$css_property}: func.fs($t);
            }
        }
        @if $d != false {
            @include mq-min(lg) {
                #{$css_property}: func.fs($d);
            }
        }
    }
}

@mixin box($width: 250, $height: $width, $border_radius: false) {
    & {
        width: func.fs($width);
        height: func.fs($height);

        @if $border_radius != false {
            border-radius: func.fs($border_radius);
        }
    }
}

@mixin not-highlight() {
    & {
        -webkit-tap-highlight-color: transparent;
        -moz-tap-highlight-color: transparent;
        /*touch-action: manipulation;*/
        outline: none;
    }
}

@mixin content-width() {
    & {
        $gutter-xs: vars.$gutter-xs;
        $gutter: vars.$gutter;

        position: absolute;
        width: calc(100% - #{vars.$gutter-xs * 2});
        left: vars.$gutter-xs;

        @if $gutter-xs != $gutter {
            @include mq-min(md) {
                width: calc(100% - #{vars.$gutter * 2});
                left: vars.$gutter;
            }
        }
    }
}

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}

//
// alias
//
@mixin media-gap($m: 10, $t: 15, $d: false) {
    @include media-css(gap, $m, $t, $d);
}

@mixin media-width($m, $t: false, $d: false) {
    @include media-css(width, $m, $t, $d);
}

@mixin media-height($m, $t: false, $d: false) {
    @include media-css(height, $m, $t, $d);
}

@mixin media-fs($m, $t: false, $d: false) {
    @include media-css(font-size, $m, $t, $d);
}

@mixin media-margin($m, $t: false, $d: false) {
    @include media-css(margin, $m, $t, $d);
}

@mixin media-padding($m, $t: false, $d: false) {
    @include media-css(padding, $m, $t, $d);
}

@mixin media-margin-top($m, $t: false, $d: false) {
    @include media-css(margin-top, $m, $t, $d);
}

@mixin media-margin-bottom($m, $t: false, $d: false) {
    @include media-css(margin-bottom, $m, $t, $d);
}

@mixin media-padding-top($m, $t: false, $d: false) {
    @include media-css(padding-top, $m, $t, $d);
}

@mixin media-padding-bottom($m, $t: false, $d: false) {
    @include media-css(padding-bottom, $m, $t, $d);
}
