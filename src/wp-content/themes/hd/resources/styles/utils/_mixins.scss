/* utils/_mixins.scss */

@use 'sass:meta';
@use 'sass:string';
@use 'sass:math';
@use 'sass:list';
@use 'sass:map';

@use '../utils/variables' as vars;
@use '../utils/functions' as func;

@mixin mq-max-width( $width: 767px ) {
    $width_value: func.fs($width);
    @media screen and (max-width: #{$width_value}) {
        @content;
    }
}

@mixin mq-min-width( $width: 768px ) {
    $width_value: func.fs($width);
    @media screen and (min-width: #{$width_value}) {
        @content;
    }
}

@mixin mq( $breakpoint, $type: min ) {
    $breakpoint-value: func.fs(func.get-breakpoint($breakpoint, vars.$mq-breakpoints, 640px));
    @if $breakpoint-value {
        @if $type == max {
            $breakpoint-value: #{$breakpoint-value - func.fs(0.02)};
        }
        @media only screen and (#{$type}-width: $breakpoint-value) {
            @content;
        }
    } @else {
        @warn 'Invalid breakpoint: `#{$breakpoint}`. Using fallback.';
    }
}

@mixin mq-min( $breakpoint: sm ) {
    @include mq($breakpoint, min) {
        @content;
    }
}

@mixin mq-max( $breakpoint: sm ) {
    @include mq($breakpoint, max) {
        @content;
    }
}

@mixin line-clamp( $n: 2 ) {
    & {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: initial;
        overflow-wrap: break-word;

        @supports (-webkit-line-clamp: $n) {
            -webkit-line-clamp: $n;
            -webkit-box-orient: vertical;
            display: -webkit-box;
        }
    }
}

@mixin hidden-text {
    & {
        border: 0;
        clip: rect(0, 0, 0, 0);
        clip-path: inset(50%);
        height: 1px;
        width: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute !important;
        overflow-wrap: normal !important;
        white-space: nowrap;
    }
}

@mixin not-highlight {
    & {
        -webkit-tap-highlight-color: transparent;
        -moz-tap-highlight-color: transparent;
        touch-action: manipulation;
        outline: none;
    }
}

@mixin flex-center {
    & {
        display: flex;
        align-items: center;
        justify-content: center;
    }
}

@mixin absolute-center {
    & {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
}

@mixin absolute-center-self( $width: 300, $height: $width ) {
    & {
        position: absolute;
        top: func.subtract(50%, func.fs(func.divide($height, 2)));
        left: func.subtract(50%, func.fs(func.divide($width, 2)));
        @include box($width, $height);
    }
}

@mixin absolute-full {
    & {
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        position: absolute;
    }
}

@mixin fixed-full {
    & {
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
        position: fixed;
    }
}

@mixin media-css( $css_property: font-size, $default: false, $sm: false, $md: false, $lg: false, $xl: false, $xxl: false ) {
    & {
        @if $default != false {
            #{$css_property}: func.fs($default);
        }

        @if $sm != false {
            @include mq-min(sm) {
                #{$css_property}: func.fs($sm);
            }
        }

        @if $md != false {
            @include mq-min(md) {
                #{$css_property}: func.fs($md);
            }
        }

        @if $lg != false {
            @include mq-min(lg) {
                #{$css_property}: func.fs($lg);
            }
        }

        @if $xl != false {
            @include mq-min(xl) {
                #{$css_property}: func.fs($xl);
            }
        }

        @if $xxl != false {
            @include mq-min(xxl) {
                #{$css_property}: func.fs($xxl);
            }
        }
    }
}

@mixin box( $width: 250, $height: $width, $border_radius: false ) {
    & {
        width: func.fs($width);
        height: func.fs($height);

        @if $border_radius != false {
            border-radius: func.fs($border_radius);
        }
    }
}

@mixin flex-self( $total: 12, $n: 1, $gap: 0, $important: false ) {
    $width: func.calculate-flex-width($total, $n, $gap);
    @if $width != 0 {
        & {
            width: #{$width}#{if($important, ' !important', '')};
        }
    }
}

@mixin flex-basis( $n: 1, $gap: 0, $important: false ) {
    $grid-columns: 12;
    @include flex-self($grid-columns, $n, $gap, $important);
}

@mixin media-flexbox( $default: 1, $sm: false, $md: false, $lg: false, $xl: false, $xxl: false ) {
    @if $default != false {
        @include flex-self($default, 1, map.get(vars.$gutters, gap));
    }

    @if $sm != false {
        @include mq-min(sm) {
            @include flex-self($sm, 1, map.get(vars.$gutters, gap-sm));
        }
    }

    @if $md != false {
        @include mq-min(md) {
            @include flex-self($md, 1, map.get(vars.$gutters, gap-md));
        }
    }

    @if $lg != false {
        @include mq-min(lg) {
            @include flex-self($lg, 1, map.get(vars.$gutters, gap-lg));
        }
    }

    @if $xl != false {
        @include mq-min(xl) {
            @include flex-self($xl, 1, map.get(vars.$gutters, gap-xl));
        }
    }

    @if $xxl != false {
        @include mq-min(xxl) {
            @include flex-self($xxl, 1, map.get(vars.$gutters, gap-xxl));
        }
    }
}

@mixin container( $xxl: false ) {
    margin-inline: auto;

    &:not(.full) {
        max-width: map.get(vars.$mq-containers, sm);

        @include mq-min(md) {
            max-width: map.get(vars.$mq-containers, md);
        }

        @include mq-min(lg) {
            max-width: map.get(vars.$mq-containers, lg);
        }

        @include mq-min(xl) {
            max-width: map.get(vars.$mq-containers, xl);
        }

        @if $xxl == true {
            @include mq-min(xxl) {
                max-width: map.get(vars.$mq-containers, xxl);
            }
        }
    }
}

@mixin aspect-ratio( $ratio-width: 3, $ratio-height: 2, $width_percent: 100% ) {
    $pb: func.divide($width_percent * $ratio-height, $ratio-width);

    & {
        @supports (aspect-ratio: 1) {
            aspect-ratio: list.slash($ratio-width, $ratio-height);
        }

        @supports not (aspect-ratio: 1) {
            height: 0;
            padding-bottom: func.fs($pb);
        }
    }
}

@mixin scale-hover( $scale: 1.06, $opacity: 1 ) {
    & {
        transform: scale(1.0001);
        will-change: transform;
        transition: transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.3s;

        &:hover {
            transform: scale($scale);
            opacity: $opacity;
        }
    }
}

@mixin cover-container( $width: 100% ) {
    & {
        position: relative;
        display: block;
        overflow: hidden;
        transition: all 0.3s ease-in-out;

        @if $width != false {
            width: func.fs($width);
        }

        & > img:first-child {
            display: block;
            @include absolute-center;
        }

        &.auto {
            & > img:first-child {
                object-fit: contain;
                object-position: center;
            }
        }

        &:not(.auto) {
            & > img:first-child {
                object-fit: cover;
                object-position: center;
            }
        }
    }
}

@mixin screen-height( $multiplier: 100, $admin_bar: false ) {
    height: calc(var(--vh, 1vh) * #{$multiplier});

    @supports (height: 100dvh) {
        height: #{$multiplier}dvh;
    }

    @include mq-min-width(601px) {
        @if $admin_bar {
            height: calc(var(--vh, 1vh) * #{$multiplier} - 46px);

            @supports (height: 100dvh) {
                height: calc(#{$multiplier}dvh - 46px);
            }
        }
    }

    @include mq-min-width(783px) {
        @if $admin_bar {
            height: calc(var(--vh, 1vh) * #{$multiplier} - 32px);

            @supports (height: 100dvh) {
                height: calc(#{$multiplier}dvh - 32px);
            }
        }
    }
}

@mixin font-face( $font-family, $font-style: normal, $font-weight: 400, $file_name, $base: '../fonts' ) {
    $base: string.unquote($base);
    $version: string.unique_id();

    @font-face {
        font-family: string.quote($font-family);
        font-style: $font-style;
        font-weight: $font-weight;
        font-display: swap;
        src: url('#{$base}/WOFF2/#{$file_name}.woff2?v=#{$version}') format('woff2'),
        url('#{$base}/TTF/#{$file_name}.ttf?v=#{$version}') format('truetype'),
        url('#{$base}/OTF/#{$file_name}.otf?v=#{$version}') format('opentype');
    }
}

@mixin clamp-font-size( $min: 10px, $max: 100px, $base: 0, $min-width: vars.$sm, $max-width: vars.$xxl ) {
    $min-rem: func.fs($min);
    $max-rem: func.fs($max);
    $min-width-rem: func.fs($min-width);
    $max-width-rem: func.fs($max-width);

    $min-val: func.strip-unit($min-rem);
    $max-val: func.strip-unit($max-rem);
    $min-width-val: func.strip-unit($min-width-rem);
    $max-width-val: func.strip-unit($max-width-rem);

    @if $min-val > $max-val {
        $tmp: $min;
        $min: $max;
        $max: $tmp;

        $min-rem: func.fs($min);
        $max-rem: func.fs($max);
        $min-val: func.strip-unit($min-rem);
        $max-val: func.strip-unit($max-rem);
    }

    // min = max
    @if $min-val == $max-val {
        & {
            font-size: $min-rem;

            @if $base > 0 {
                line-height: $min-rem * $base;
            }
        }
    }

    // min < max
    @if $min-val < $max-val {
        $slope: func.divide(
                                ($max-val - $min-val),
                                ($max-width-val - $min-width-val)
        );
        $intercept: $min-val - $slope * $min-width-val;
        $font-clamp: clamp(
                #{$min-rem},
                #{$intercept}rem + #{$slope * 100}vw,
                #{$max-rem}
        );

        & {
            font-size: $font-clamp;

            @if $base > 0 {
                $lh-intercept: $min-val * $base - $slope * $base * $min-width-val;
                $line-height-clamp: clamp(
                        #{$min-rem * $base},
                        #{$lh-intercept}rem + #{$slope * $base * 100}vw,
                        #{$max-rem * $base}
                );

                line-height: $line-height-clamp;
            }
        }
    }
}

@mixin clamp-fs( $heading: h1, $base: 0 ) {
    $fs-heading: map.get(vars.$font-sizes, $heading);
    $min: func.fs(list.nth($fs-heading, 1));
    $max: func.fs(list.nth($fs-heading, 2));

    @include clamp-font-size($min, $max, $base, vars.$sm, vars.$xxl);
}

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @-moz-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}
